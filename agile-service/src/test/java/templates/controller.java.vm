package ${package.Controller};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};

import io.swagger.annotations.Api;

#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * ${table.comment} API 控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Api(value = "${entity} API", description = "${table.comment} API")
@RestController
@RequestMapping("/api#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityPath}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}<${entity}, ${table.serviceName}> {
#else
public class ${table.controllerName} {
#end
    #set ($serviceVar = $table.serviceName.substring(0,1).toLowerCase() + $table.serviceName.substring(1))

    @Autowired
    private ${table.serviceName} ${serviceVar};

    @Override
    protected ${table.serviceName} getService() {
        return this.${serviceVar};
    }
#**

    @GetMapping("")
    @ApiOperation(value = API.QUERY_NAME, notes = API.QUERY_DESC)
    public ResponseEntity<PageResult> query(Page<${entity}> page, ${entity} entity) {
        return ResponseEntityBuilder.build(${serviceVar}.selectPage(page, new EntityWrapper<${entity}>(entity)));
    }

    @GetMapping("")
    @ApiOperation(value = API.QUERY_NAME, notes = API.QUERY_DESC)
    public ResponseEntity<PageResult> query(Page<${entity}> page, ${entity} entity) {
        return ResponseEntityBuilder.build(${serviceVar}.selectPage(page, new EntityWrapper<${entity}>(entity)));
    }

    @GetMapping("/count")
    @ApiOperation(value = API.COUNT_NAME, notes = API.COUNT_DESC)
    public ResponseEntity<Result> count(${entity} entity) {
        return ResponseEntityBuilder.build(${serviceVar}.selectCount(new EntityWrapper<${entity}>(entity)));
    }

    @PostMapping("")
    @ApiOperation(value = API.CREATE_NAME, notes = API.CREATE_DESC)
    public ResponseEntity<Result> create(@RequestBody ${entity} entity) {
        return ResponseEntityBuilder.build(${serviceVar}.insert(entity), entity);
    }

    @PutMapping("/{id}")
    @ApiOperation(value = API.UPDATE_NAME, notes = API.UPDATE_DESC)
    public ResponseEntity<Result> update(@RequestBody ${entity} entity) {
        return ResponseEntityBuilder.build(${serviceVar}.updateById(entity));
    }

    @DeleteMapping("/{id}")
    @ApiOperation(value = API.DELETE_NAME, notes = API.DELETE_DESC)
    public ResponseEntity<Result> delete(@PathVariable int id) {
        return ResponseEntityBuilder.build(${serviceVar}.deleteById(id));
    }
**#
}
